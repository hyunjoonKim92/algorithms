"use strict"

// 휴대폰 번호 양식 검사
// 예를 들어 010-1111-2222 라는 전화번호는
// "숫자3개", "-", "숫자4개", "-", "숫자4개" 로 이루어져 있는데,
 
// (\d는 숫자를 의미하고, {} 안의 숫자는 갯수를 의미한다.) 
const phoneNumRegex = /\d{3}-\d{4}-\d{4}/;

phoneNumRegex.test('010-1111-2222') // true; 
phoneNumRegex.test('01-11-22') // false;


// 리터럴 방식
const abc = /abc/;

// 생성자 방식
const thisABC = new RegExp("abc");

// 정규식 플래그
// i (Ignore Case) => 대소문자를 구분하지 않고 검색한다.
    // const str = "abcABC";
    // str.match(/a/gi);
    // result => (2) ["a", "A"]
// g (Global) => 문자열 내 모든 패턴을 검색한다. 
    // const str = 'abcabc';
    // str.match(/a/g);
    // result => (2) ["a", "a"]
// m (Multi Line) => 문자의 행이 바뀌더라도 검색을 계속한다.
    // let str = "\nIs th\nis it?";
    // str.match(/^is/m);
    // result => is
    // let str = `abc
    // add`;
    // str.match(/c$/m);
    // result => ["c"]
// s => .(모든 문자 정규식) 이 개행 문자 \n 도 포함하도록
// u (Unicode) => 유니코드 전체를 지원
// y (Sticky) => 문자 내 특정 위치에서 검색을 진행하는 'sticky' 모드를 활성화


// 정규표현식 매칭 패턴 (문자, 숫자, 기호 등)
// a-zA-Z => 영어 알파멧 (- 로 범위 지정)
// ㄱ-ㅎ가-힣 => 한글 문자 (- 로 범위 지정)
// 0-9 => 숫자 (- 로 범위 지정)
// . => 모든 문자열 (숫자, 한글, 영어, 특수기호, 공백 모두), 단 줄바꿈x
// \d => 숫자
// \D => 숫자가 아닌 것
// \w 밑줄 문자를 포함한 영숫자 문자에 대응
    // [A-Za-z0-0] 와 동일
// \W => \w 가 아닌 것
// \s => space 공백
// \S => space 공백이 아닌 것
// \특수기호
    // \*\^\&\!\? ... 등


// 정규 표현식 검색 패턴
// | => OR
// [] => 괄호 안의 문자들 중 하나, or 처리라 보면 된다.
    // /[abc]/ 'a' 또는 'b' 또는 'c' 를 포함하는
// [^문자] => 괄호 안의 문자를 제외한 것
    // [^IgEn] 'I', 'g', 'E', 'n' 4개 문자를 제외
// ^문자열 => 특정 문자열로 시작 (괄호 없음 주의)
    // /^www/
// 문자열$ => 특정 문자열로 끝남
    // /com$/


// 정규 표현식 갯수 (수량) 반복 패턴
// ? => 없거나 or 최대 한 개만
    // /apple?/
// * => 없거나 or 있거나 (여러개)
    // /Wo*/
// + => 최소 한 개 or 여러 개
    // /Wo+/
// *? => 없거나, 있거나 && 없거나, 최대 한 개 = 없음
    // {0} 와 동일
// +? => 최소 한 개, 있거나 && 없거나, 최대 한 개 = 한개
    // {1} 와 동일
// {n} => n개
// {Min,} => 최소 Min 개 이상
// {Min, Max} => 최소 Min 개 이상, 최대 Max 개 이하
    // {3, 5} == {3} 와 동일


// 정규 표현식 그룹
// () => 그룹화 & 캡쳐
    // const ko = 'kokokoko'
    // ko.match(/(ko)+/)
    // result => 'kokokoko', 'ko'
// (?:패턴) => 그룹화 캡쳐x
// (?=) => 앞쪽 일치 (Lookahead)
    // /ab(?=c)/
// (?!) => 앞쪽 일치 부정 (Negative Lookahead)
    // /ab(?!c)/
// (?<=) 뒤쪽 일치 (Lookbehind)
    // /(?<=ab)c/
// (?<!) 뒤쪽 일치 부정 (Negative Lookbehind)
    // /(?<!ab)c/